{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","NewMovie","state","addedMovie","errorMessage","titleDirty","imgUrlDirty","imdbUrlDirty","imdbIdDirty","onChangeHandler","e","target","name","value","val","setState","blurHandler","onSubmitHandler","preventDefault","replace","submitMessage","clearForm","prevProps","prevState","snapshot","this","props","addMovie","validForm","onSubmit","htmlFor","type","onChange","onBlur","id","required","style","color","pattern","padding","disabled","Component","App","moviesFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7418ed02.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React, { Component } from 'react';\nimport './NewMovie.scss';\nimport PropTypes from 'prop-types';\n\nexport class NewMovie extends Component {\n  state = {\n    addedMovie: {},\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    errorMessage: '',\n    titleDirty: false,\n    imgUrlDirty: false,\n    imdbUrlDirty: false,\n    imdbIdDirty: false,\n  };\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevState.addedMovie !== this.state.addedMovie) {\n      this.props.addMovie(this.state.addedMovie);\n      this.clearForm();\n    }\n  }\n\n  onChangeHandler = (e) => {\n    const { name, value } = e.target;\n\n    const val = `${name}Dirty`;\n\n    this.setState({\n      [name]: value,\n      [val]: false,\n      submitMessage: false,\n    });\n  }\n\n  blurHandler = (e) => {\n    if (e.target.value) {\n      return;\n    }\n\n    switch (e.target.name) {\n      case 'title':\n        this.setState({\n          titleDirty: true,\n          errorMessage: `Title value is invalid`,\n        });\n        break;\n      case 'imgUrl':\n        this.setState({\n          imgUrlDirty: true,\n          errorMessage: `ImgUrl value is invalid`,\n        });\n        break;\n      case 'imdbUrl':\n        this.setState({\n          imdbUrlDirty: true,\n          errorMessage: `ImdbUrl value is invalid`,\n        });\n        break;\n      case 'imdbId':\n        this.setState({\n          imdbIdDirty: true,\n          errorMessage: `ImdbId value is invalid`,\n        });\n        break;\n      default:\n    }\n  }\n\n  onSubmitHandler = (e) => {\n    e.preventDefault();\n\n    if (\n      !this.state.title || !this.state.title.replace(/ /g, '')\n      || !this.state.imgUrl || !this.state.imgUrl.replace(/ /g, '')\n      || !this.state.imdbUrl || !this.state.imdbUrl.replace(/ /g, '')\n      || !this.state.imdbId || !this.state.imdbId.replace(/ /g, '')\n    ) {\n      this.setState({\n        submitMessage: true,\n      });\n      this.clearForm();\n\n      return;\n    }\n\n    this.setState(state => ({\n      addedMovie: {\n        title: state.title,\n        description: state.description,\n        imgUrl: state.imgUrl,\n        imdbUrl: state.imdbUrl,\n        imdbId: state.imdbId,\n        submitMessage: false,\n      },\n    }));\n  }\n\n  clearForm() {\n    this.setState({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n  }\n\n  render() {\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n      errorMessage,\n      titleDirty,\n      imgUrlDirty,\n      imdbUrlDirty,\n      imdbIdDirty,\n    } = this.state;\n\n    let validForm = true;\n\n    if (!title || !imgUrl\n      || !imdbUrl || !imdbId) {\n      validForm = false;\n    }\n\n    return (\n      <form\n        className=\"form-style-7\"\n        onSubmit={this.onSubmitHandler}\n      >\n        <ul>\n          <li>\n            <label htmlFor=\"title\">Title</label>\n            <input\n              name=\"title\"\n              type=\"text\"\n              value={title}\n              onChange={this.onChangeHandler}\n              onBlur={this.blurHandler}\n              id=\"title\"\n              required=\"true\"\n            />\n            {(titleDirty && errorMessage)\n            && <span style={{ color: 'red' }}>{errorMessage}</span>}\n          </li>\n          <li>\n            <label htmlFor=\"description\">Description</label>\n            <input\n              name=\"description\"\n              type=\"text\"\n              value={description}\n              onChange={this.onChangeHandler}\n              id=\"description\"\n            />\n          </li>\n          <li>\n            <label htmlFor=\"imgUrl\">ImgUrl</label>\n            <input\n              name=\"imgUrl\"\n              type=\"text\"\n              value={imgUrl}\n              onChange={this.onChangeHandler}\n              onBlur={this.blurHandler}\n              id=\"imgUrl\"\n              required=\"true\"\n              pattern=\"/^((([A-Za-z]{3,9}:(?:\\\\/\\\\/)?)(?:\n              [-;:&=+\\$,\\\\w]+@)?[A-Za-z0-9.-]+|\n              (?:www\\\\.|[-;:&=+\\$,\\\\w]+@)[A-Za-z0-9.-]+)\n              ((?:\\\\/[+~%/.\\\\w-_]*)?\\\\??(?:\n              [-+=&;%@.\\\\w_]*)#?(?:[.!/\\\\\\\\\\\\w]*))?)\\$/\"\n            />\n            {(imgUrlDirty && errorMessage)\n            && <span style={{ color: 'red' }}>{errorMessage}</span>}\n          </li>\n          <li>\n            <label htmlFor=\"imdbUrl\">ImdbUrl</label>\n            <input\n              name=\"imdbUrl\"\n              type=\"text\"\n              value={imdbUrl}\n              onChange={this.onChangeHandler}\n              onBlur={this.blurHandler}\n              id=\"imdbUrl\"\n              required=\"true\"\n              pattern=\"/^((([A-Za-z]{3,9}:(?:\\\\/\\\\/)?)(?:\n              [-;:&=+\\$,\\\\w]+@)?[A-Za-z0-9.-]+|\n              (?:www\\\\.|[-;:&=+\\$,\\\\w]+@)[A-Za-z0-9.-]+)\n              ((?:\\\\/[+~%/.\\\\w-_]*)?\\\\??(?:\n              [-+=&;%@.\\\\w_]*)#?(?:[.!/\\\\\\\\\\\\w]*))?)\\$/\"\n            />\n            {(imdbUrlDirty && errorMessage)\n            && <span style={{ color: 'red' }}>{errorMessage}</span>}\n          </li>\n          <li>\n            <label htmlFor=\"imdbId\">ImdbId</label>\n            <input\n              name=\"imdbId\"\n              type=\"text\"\n              value={imdbId}\n              onChange={this.onChangeHandler}\n              onBlur={this.blurHandler}\n              id=\"imdbId\"\n              required=\"true\"\n            />\n            {(errorMessage && imdbIdDirty)\n            && <span style={{ color: 'red' }}>{errorMessage}</span>}\n          </li>\n          <li>\n            { this.state.submitMessage\n            && (\n            <p style={{\n              color: 'red', padding: '10px',\n            }}\n            >\n              All inputs must must contain characters\n            </p>\n            )}\n            <button\n              type=\"submit\"\n              disabled={!validForm}\n            >\n              Add Movie\n            </button>\n          </li>\n        </ul>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(state => ({\n      movies: [...state.movies, movie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie\n            addMovie={this.addMovie}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}